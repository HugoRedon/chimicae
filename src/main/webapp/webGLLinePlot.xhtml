<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:h="http://java.sun.com/jsf/html">

	
	<h:head>
		<title>Chimicae</title>
		<meta charset="utf-8"/>
	 	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0"/>
		 
		<h:outputStylesheet name="css/style.css"  />
		
		<h:outputScript name="js/three.min.js"  />
		<h:outputScript name="js/Detector.js"  />
		<h:outputScript name="js/Stats.js"  />
		 <!-- <h:outputScript name="js/controls/TrackballControls.js"  /> --> 
		<h:outputScript name="js/controls/OrbitControls.js"  /> 
		<h:outputScript name="js/THREEx.KeyboardState.js"  />
		<h:outputScript name="js/THREEx.FullScreen.js"  />
		<h:outputScript name="js/THREEx.WindowResize.js"  />
		<h:outputScript name="fonts/ubuntu_light.typeface.js"/>
		<h:outputStylesheet name="css/controls.css"/>
		
		
		
	</h:head> 
	<h:body> 
		<ui:insert name="content">
			<!-- <div id="tooltip" class="menu">Tooltip</div> -->
			<div id="labels" class="menu">
				Propiedad<br/><br/>
				<div class="lbl btn" id="btn_add">Entalpía</div>
				<div class="lbl btn" id="btn_sub">Entropía</div>
				<div class="lbl btn" id="btn_rsub">E. Gibbs</div>

				Líneas<br/><br/>
				<div class="lbl btn" id="btn_pressure">Presión</div>
				<div class="lbl btn" id="btn_tempLines">Temperatura</div>
	<!-- 
				Labels<br/><br/>
				<div class="lbl" id="lbl_src">Source</div>
				<div class="lbl" id="lbl_dst">Destination</div>  -->
			</div>
			
			
			 <div id="ThreeJS" style="position: absolute; left:0px; top:0px" ></div>
			 <div id="info"> Gráfico</div>
		    <script>
		  //<![CDATA[
		    var container, scene, camera, renderer, controls, stats;
		    var keyboard = new THREEx.KeyboardState();
		    var clock = new THREE.Clock();
		    // custom global variables
		    var MovingCube=[];
		    var vaporAreaTemperatureLines=#{linesPlotsBean.vaporAreaTemperatureLines};
	        var liquidAreaLines=#{linesPlotsBean.liquidAreaTemperatureLines};
		    var liquidLinejson= #{linesPlotsBean.liquidLineJson};
		    var vaporLinejson = #{linesPlotsBean.vaporLineJson};
		    var vaporAreaPressureLines =#{linesPlotsBean.vaporAreaPressureLines};
		    var liquidAreaPressureLines = #{linesPlotsBean.liquidAreaPressureLines};

		    var plotType='enthalpy';
		    var yAxisLabel='Presión [Pa]';
		    var xAxisLabel='Entalpía [J/kmol]';
		    var zAxisLabel ='Temperatura [K]';

		    var temperatureLines={on:true};
		    var pressureLines ={on: true};

		    var linesObject=[];
			var textObjects=[];

			var axisLength;

			var mouse={x:0,y:0};
			var INTERSECTED, projector;
			var points = new THREE.Geometry();
			var parts;

			var sphereMaterial = new THREE.MeshBasicMaterial(
					 { color: 0xff0000, shading: THREE.FlatShading } );
			var sphereGeometry = new THREE.SphereGeometry( 5, 32, 32 );
			 var sphere = new THREE.Mesh( sphereGeometry, sphereMaterial );			
			var INTERSECTEDSPHERE;
			var spheres=[];

			var liquidSurface=[];
			var vaporSurface=[];


			// crosshairSprite setup
			var crosshairTexture = THREE.ImageUtils.loadTexture('images/jbosscorp_logo.png');
			var crosshairMaterial = new THREE.SpriteMaterial( { map: crosshairTexture, depthTest: false } );
			crosshairSprite = new THREE.Sprite(crosshairMaterial);
			//scale the crosshairSprite down in size
			crosshairSprite.scale.set(0.2, 0.2, 0.2);
			//add crosshairSprite as a child of our camera object, so it will stay centered in camera's view
			 var tooltip = Tooltip(false);


		    
		    init();
		    animate();
		
		   function init(){
			   //	MovingCube = new THREE.Object3D();
			   
			   //tooltip.show("xvasldkfasldk");
			   //xAxisTitleLabel.setPos({x:50,y:50});
		        sceneCameraRenderer();
		        eventsControlsStats();
		        lightFloorSkybox();
		        debugaxis(1200);
		     // initialize object to perform world/screen calculations
		    	projector = new THREE.Projector();
		    	
				draw();
				scene.add(sphere);

				// when the mouse moves, call the given function
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
			    
			  	addEqHandler( "btn_add", 'enthalpy','Entalpía [J/kmol]' );
				addEqHandler( "btn_sub", 'entropy','Entropía [j/(kmol K)]' );
				addEqHandler( "btn_rsub", 'gibbs' ,'E. Gibbs [j/kmol]');

				addLinesHandler("btn_tempLines",temperatureLines);
				addLinesHandler("btn_pressure",pressureLines);

				//addMaxMinHandler("btn_max_min");
				//camera.add(crosshairSprite);
				//position sprites by percent X:(100 is all the way to the right, 0 is left, 50 is centered)
//				                            Y:(100 is all the way to the top, 0 is bottom, 50 is centered)
				var crosshairPercentX = 50;
				var crosshairPercentY = 50;
				var crosshairPositionX = (crosshairPercentX / 100) * 2 - 1;
				var crosshairPositionY = (crosshairPercentY / 100) * 2 - 1;
				crosshairSprite.position.x = crosshairPositionX * camera.aspect;
				crosshairSprite.position.y = crosshairPositionY;
				crosshairSprite.position.z = -1.5;

		    }

		

		    function draw(){
		    	scene.remove(parts);
		    	points = new THREE.Geometry(); 
			    //points.vertices =[];
		    	linesObject.forEach(function(entry){
					scene.remove(entry);
				});

				/* console.log("children.length"+MovingCube.length); */
				MovingCube.forEach(function(obj){
					scene.remove(obj);	
				});
				liquidSurface=[];
				vaporSurface=[];
				

				textObjects.forEach(function(entry){
					scene.remove(entry);
				});
				
		    	var material = new THREE.LineBasicMaterial({
	                color: 0x0000ff
	            });
			    var redmaterial = new THREE.LineBasicMaterial({
	                color: 0xff0000
	            });
	           var jsonline= enthalpyLine(liquidLinejson);
	           var vaporJsonLine= enthalpyLine(vaporLinejson);

	           var jsonsLines =[jsonline,vaporJsonLine]; 
				var liquidLines=[jsonline];
				var vaporLines=[vaporJsonLine];

				
					liquidAreaLines.forEach(function(entry){
							var line = enthalpyLine(entry);
							jsonsLines.push(line);
							if(temperatureLines.on){
								liquidLines.push(line);
							}
							
						});

					var textMaterial =new THREE.MeshPhongMaterial( { 
			            color: 0x000044, 
			            ambient: 0x000044, // should generally match color
			            specular: 0x050505,
			            side: THREE.DoubleSide,
			            shininess: 100
			        } ) ;
					
					
					vaporAreaTemperatureLines.forEach(function(entry){
							var line = enthalpyLine(entry);
							jsonsLines.push(line);
							if(temperatureLines.on){
								vaporLines.push(line);
							}
							
						});
				

				
					vaporAreaPressureLines.forEach(function(entry){
							var line=enthalpyLine(entry);
							jsonsLines.push(line);
							if(pressureLines.on){
								liquidLines.push(line);
							}
							vaporSurface.push(line);
						});
	
					liquidAreaPressureLines.forEach(function(entry){
							var line =enthalpyLine(entry);
							jsonsLines.push(line);
							if(pressureLines.on){
								vaporLines.push(line);
							}
							liquidSurface.push(line);
						});
				
				
	           normalizeVars(jsonsLines);

	           liquidLines.forEach(function(entry){
					createAndAddLineGeometry(entry ,0x000000);
		          });
	           vaporLines.forEach(function(entry){
	        	   createAndAddLineGeometry(entry ,0x000000);
		           });	        

	           createAndAddGeometry(liquidSurface, textMaterial);
	           createAndAddGeometry(vaporSurface, textMaterial); 	 	
	          drawAxisLabels();

	          drawPoints();
		    }

			function drawPoints(){
				
				
				var color = new THREE.Color( 0x00aa00 );
				var mat = new THREE.PointCloudMaterial( { size: 5,color:color } );
				
				 parts = new THREE.PointCloud( points, mat );
				scene.add(parts);
			}
		    
		   function addEqHandler( id, eq ,yLabel) {

				var el = document.getElementById( id );

				el.addEventListener( 'click', function () {

					plotType = eq;
					xAxisLabel = yLabel;	

					var l = document.getElementById("info");
					if(plotType === 'entropy'){
						l.innerHTML = "Temperatura-Entropía-Presión";
					}else if(plotType === 'gibbs'){
						l.innerHTML = "Temperatura-Gibbs-Presión";
					}else{
						l.innerHTML = "Temperatura-Entalpía-Presión";
					}				
					draw();
					
					document.getElementById( "btn_add" ).style.backgroundColor = "transparent";
					document.getElementById( "btn_sub" ).style.backgroundColor = "transparent";
					document.getElementById( "btn_rsub" ).style.backgroundColor = "transparent";

					el.style.backgroundColor = "darkorange";

				});

			}


		   function addLinesHandler( id, lines) {

				var el = document.getElementById( id );

				el.addEventListener( 'click', function () {

					lines.on = !lines.on;

					/* console.log(lines.on);
					console.log(temperatureLines.on); */
					draw();
					
					if(lines.on){
						el.style.backgroundColor = "darkorange";
					}else{
						el.style.backgroundColor = "transparent";
					}

				});

			}
		   function addMaxMinHandler( id) {

				var el = document.getElementById( id );

				el.addEventListener( 'click', function () {
					console.log("max");
		    		//big();
		    		el.style.backgroundColor = "darkorange";
					/* if(lines.on){
						el.style.backgroundColor = "darkorange";
					}else{
						el.style.backgroundColor = "transparent";
					} */

				});

			}
	


		    function enthalpyLine(jsonArrayPointInfo){
			    var jsonline=[];
	           for (var i = 0; i< jsonArrayPointInfo.length; i++) {
	        	   var yp =0;
	        	   
					if(plotType === 'entropy'){
						yp=jsonArrayPointInfo[i].entropy;
					}else if(plotType === 'gibbs'){
						yp=jsonArrayPointInfo[i].gibbs;
					}else{
						yp = jsonArrayPointInfo[i].enthalpy;
					}
						
		            
		              var position ={
				              	
		                        z :jsonArrayPointInfo[i].temperature,
		                        x: yp,
		                        y : jsonArrayPointInfo[i].pressure,
		                        userData: jsonArrayPointInfo[i]
		                      };
						
		              jsonline[i] = position;
		           };
		           
		           jsonline.userData=jsonArrayPointInfo;
		           return jsonline;
		    }
			/* function forLines(){
				 var material = new THREE.LineBasicMaterial({
				        color: 0x0000ff
				    });
				 var material2 = new THREE.LineBasicMaterial({
				        color: 0xff0000
				    });
				    
			    var jsonline1 = #{plotBean.lineJson};
			    var jsonline2 = #{plotBean.secondLineJson};

			    normalizeVars([jsonline1,jsonline2]);
			    createAndAddLineGeometry(jsonline1,material);
			    createAndAddLineGeometry(jsonline2,material2);
			    
			} */
		 
			function createAndAddLineGeometry(jsonline1,hexColor){
				var geometry = new THREE.Geometry();
				var particles=[];
	            for(var i = 0; i<jsonline1.length ; i++){
	                var x = jsonline1[i].x;
	                var y = jsonline1[i].y;
	                var z = jsonline1[i].z;
	                geometry.vertices.push(new THREE.Vector3(x,y,z));
	            

	                var vector = new THREE.Vector3(x,y,z);	                 	                  				
					var vectorData =jsonline1.userData[i];
					vector.userData = vectorData;
 					points.vertices.push(vector);					
					particles.push(vector); 
	               			         
	            }
	            var material = new THREE.LineBasicMaterial({
	                color: hexColor
	            });
	            var line = new THREE.Line(geometry, material);
	            line.name='name';
	            line.userData = particles;

	            
	            linesObject.push(line);
	            //console.log('lineadded');
	            scene.add(line);
	            return line;
			}
		    

		    function normalizeAndAddGeometries(jsons,materials){
		    	normalizeVars(jsons);
	        	createAndAddGeometries(jsons,materials);
		    }

			function createAndAddGeometries(jsons,materials){
				jsons.forEach(function(json,index){
					createAndAddGeometry(json,materials[index]);
				});
			}
		    
		    function createAndAddGeometry(json,material){
		    	var geometry = new THREE.Geometry();		    	

		        var nL = json.length;
	            var n = json[0].length;

	           /*  console.log('nL: '+nL);
	            console.log('   n: '+n); */
	            var index = 0;
				for(var i = 0; i < nL;i++){
					for (var j = 0; j<n ;j++ ){
					 	var x = json[i][j].x;
		                var y = json[i][j].y;
		                var z = json[i][j].z;
		                //console.log('line[i] '+ line[i].x);
		                //console.log(index);
		                geometry.vertices[index++] = new THREE.Vector3(x,y,z);
		                //geometry.vertices.push(new THREE.Vector3(x,y,z));
					}
				}

			    
	        
	            //var n = Math.sqrt( json.length);	           
	            for(var i = 0; i < nL-1;i++){
	                for(var j = 0; j < (n-1);j++){
	                    var index = n*i +j;
	                   /*  console.log('i'+i);
	                    console.log('j'+j);*/
	                    //console.log(index); 
	                    geometry.faces.push(new THREE.Face3(index,index+1,n+index));
	                    geometry.faces.push(new THREE.Face3(index+1,index+n+1,index+n));
	                }
	            }	
	            geometry.mergeVertices()
		        geometry.computeFaceNormals();
	            geometry.computeVertexNormals();	            
		        var mesh = new THREE.Mesh(geometry, material);
		       /*  console.log(geometry.vertices.length);
				console.log("created surface"); */

				
		        MovingCube.push(mesh);
		        scene.add(mesh);		
	            
		    }
	
	
	
			function sceneCameraRenderer(){
			     // SCENE
			    scene = new THREE.Scene();
			    // CAMERA
			    var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
			    var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
			    camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
			    
			    camera.position.set(500,-2000,1000);
			    camera.up = new THREE.Vector3( 0, 0, 1 );
			    
			    scene.add(camera);

			    
			    camera.lookAt(scene.position);

			    
			    // RENDERER
			    if ( Detector.webgl )
			        renderer = new THREE.WebGLRenderer( {antialias:true} );
			    else
			        renderer = new THREE.CanvasRenderer(); 
			    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);			    
			    container = document.getElementById( 'ThreeJS' );
			    container.appendChild( renderer.domElement );
			}
			function eventsControlsStats(){
			    // EVENTS
			    THREEx.WindowResize(renderer, camera);
			    THREEx.FullScreen.bindKey({ charCode : 'm'.charCodeAt(0) });
			    // CONTROLS
			    //controls = new THREE.TrackballControls(camera,renderer.domElement);
			    //controls = new THREE.OrbitControls( camera, renderer.domElement );
			    
			     controls = new THREE.OrbitControls( camera,renderer.domElement );
				controls.damping = 0.2;
			    // STATS
			    stats = new Stats();
			    stats.domElement.style.position = 'absolute';
			    stats.domElement.style.top = '0px';
			    stats.domElement.style.right='0px';
			    stats.domElement.style.zIndex = 100;
			    container.appendChild( stats.domElement );
			}
			function animate(){
			    requestAnimationFrame( animate );
			    render();  
			    update();     
			    controls.update();
			    stats.update();
			}

			
			function update()
			{

				linesIntersection();
				sphereIntersection();					
				controls.update();
				stats.update();
			}
			function sphereIntersection(){
				var vector = new THREE.Vector3( mouse.x, mouse.y, 1 );
				projector.unprojectVector( vector, camera );
				var ray = new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize() );
				var sphereIntersects = ray.intersectObjects(MovingCube);
				

				if ( sphereIntersects.length > 0 ){
					var p =sphereIntersects[0].point;
					
					var cp = points.vertices[0];
					//console.log('x,y,z ('+cp.x +','+cp.y+','+cp.z+')');
					
					 var minDistance = distance(p,cp);
					 
					for (var i = 0;i < points.vertices.length;i++){
						var d = distance(p, points.vertices[i]);
						if(d <minDistance){
							cp = points.vertices[i];
							minDistance =d;
						}
					}  
					sphere.position.set(cp.x,cp.y,cp.z);

					console.log(cp.userData.toString());
					
					tooltip.show("temperatura:"+cp.userData.temperature +
							"<br/>presión:" + cp.userData.pressure);


					/*  crosshairSprite.position.x =cp.x ;//*camera.aspect;
						crosshairSprite.position.y = cp.y;		 */			

					//console.log('userdata: ' + cp.userData);
					//console.log('Point'+cp);
					//console.log('x,y,z ('+cp.x +','+cp.y+','+cp.z+')');
				 	if ( sphereIntersects[ 0 ].object != INTERSECTEDSPHERE ) {
					     //restore previous intersection object (if it exists) to its original color
						/* if ( INTERSECTEDSPHERE ) {
							INTERSECTEDSPHERE.material.color.setHex( INTERSECTEDSPHERE.currentHex );
						}
						// store reference to closest object as current intersection object
						INTERSECTEDSPHERE = sphereIntersects[ 0 ].object;
						// store color of closest object (for later restoration)
						INTERSECTEDSPHERE.currentHex = INTERSECTEDSPHERE.material.color.getHex();
						// set a new color for closest object
						INTERSECTEDSPHERE.material.color.setHex( 0xffff00 );

						if(sphereIntersects[0].point){
							console.log('Point'+sphereIntersects[0].point);
						}  */
					} 
				}else{
					tooltip.show("");
					//tooltip.hide();
				}
			}


			function distance( v1, v2){
			    var dx = v1.x - v2.x;
			    var dy = v1.y - v2.y;
			    var dz = v1.z - v2.z;

			    return Math.sqrt(dx*dx+dy*dy+dz*dz);
			}

			function linesIntersection(){
				var vector = new THREE.Vector3( mouse.x, mouse.y, 1 );
				projector.unprojectVector( vector, camera );
				var ray = new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize() );
				var intersects = ray.intersectObjects( linesObject );
				
				if ( intersects.length > 0 ){
					// if the closest object intersected is not the currently stored intersection object
					if ( intersects[ 0 ].object != INTERSECTED ) {
					    // restore previous intersection object (if it exists) to its original color
						if ( INTERSECTED ) {
							INTERSECTED.material.color.setHex( INTERSECTED.currentHex );
						}
						// store reference to closest object as current intersection object
						INTERSECTED = intersects[ 0 ].object;
						// store color of closest object (for later restoration)
						INTERSECTED.currentHex = INTERSECTED.material.color.getHex();
						// set a new color for closest object
						INTERSECTED.material.color.setHex( 0xffff00 );

						
						// update text, if it has a "name" field.
						if ( INTERSECTED.name ){
							spheres.forEach(function(entry){
								scene.remove(entry);
							});							
							 
							 														
							INTERSECTED.userData.forEach(function(entry){
								/*  var sphereMaterial = new THREE.MeshBasicMaterial(
										 { color: 0xff0000, shading: THREE.FlatShading } );
							//var sphereGeometry = new THREE.SphereGeometry( 5, 32, 32 );	 
								var sphere = new THREE.Mesh( sphereGeometry, sphereMaterial );
								
								sphere.position.set(entry.x,entry.y,entry.z);															
								scene.add(sphere);
								spheres.push(sphere); 	 */
							});
							//var p = INTERSECTED.point;
							//console.log(p);
							//sphere.position.copy(p);
							
						    //context1.clearRect(0,0,640,480);
							//var message = intersects[ 0 ].object.name;
						//	var metrics = context1.measureText(message);
							//var width = metrics.width;
							/* context1.fillStyle = "rgba(0,0,0,0.95)"; // black border
							context1.fillRect( 0,0, width+8,20+8);
							context1.fillStyle = "rgba(255,255,255,0.95)"; // white filler
							context1.fillRect( 2,2, width+4,20+4 );
							context1.fillStyle = "rgba(0,0,0,1)"; // text color
							context1.fillText( message, 4,20 );
							texture1.needsUpdate = true; */
							
						}
						else
						{
							//context1.clearRect(0,0,300,300);
							//texture1.needsUpdate = true;
						}
					}
				} 
				else // there are no intersections
				{
					// restore previous intersection object (if it exists) to its original color
					if ( INTERSECTED ) {
						//INTERSECTED.material.color.setHex( INTERSECTED.currentHex );
					}
					// remove previous intersection object reference
					//     by setting current intersection object to "nothing"
					//INTERSECTED = null;
					//context1.clearRect(0,0,300,300);
					//texture1.needsUpdate = true;
				}
				
			}


			function mouseProyection(){
				var vector = new THREE.Vector3(
					    ( mouse.x / window.innerWidth ) * 2 - 1,
					    - ( mouse.y / window.innerHeight ) * 2 + 1,
					    0.5 );
				projector.unprojectVector( vector, camera );
				var dir = vector.sub( camera.position ).normalize();
				var distance = - camera.position.z / dir.z;
				var pos = camera.position.clone().add( dir.multiplyScalar( distance ) );
				return pos;
			}
	
			function render() 
			{

				
				renderer.render( scene, camera );
				
			}
	
	
			function lightFloorSkybox(){
				//scene.add( new THREE.AmbientLight( 0xffffff ) );
			    // LIGHT
			    var light = new THREE.PointLight(0xffffff);
			    light.position.set(0,0,2500);
			    light.castShadow =true;
	
			    var light2 = new THREE.PointLight(0xffffff);
			    light2.position.set(2500,2500,2500);
			    light2.castShadow =true;
			    

			    var light3 = new THREE.PointLight(0xffffff);
			    light3.position.set(-300,-300,100);
			    light3.castShadow =true;
			    scene.add(light3);

			    var light4 = new THREE.PointLight(0xffffff);
			    light4.position.set(500,-1000,500);
			    light4.castShadow =true;
			    scene.add(light4);
			    
		

			    /* var sprite = new THREE.Sprite( new THREE.SpriteCanvasMaterial( { color: 0xff0040 } ) );
			    light.add( sprite ); */
				scene.add(light2);
			    scene.add(light);
			    
			    // FLOOR
			    
			    var wireframeMaterial = new THREE.MeshBasicMaterial( { color: 0x555555, wireframe: true, side:THREE.DoubleSide } ); 
			    var floorGeometry = new THREE.PlaneGeometry(1500, 1500, 10, 10);
			    var floor =new THREE.Mesh(floorGeometry, wireframeMaterial);
			    //floor.position.z = 1000;
			    floor.position.x=500;
			    floor.position.y=500;
			    //floor.rotation.x = Math.PI / 2;
			    scene.add(floor);
			    // SKYBOX/FOG
			    var skyBoxGeometry = new THREE.BoxGeometry( 10000, 10000, 10000 );
			    var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0xdddddd, side: THREE.BackSide } );
			    var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
			     scene.add(skyBox);
			    //scene.fog = new THREE.FogExp2( 0x9999ff, 0.00025 );
			}
			function slope(min,max){
            	return 1000/(max-min);
            }

		    function normalizeVars(jsons){
		    	var minX = jsons[0][0].x;
		    	var maxX = jsons[0][0].x;

		    	var minY = jsons[0][0].y;
		    	var maxY = jsons[0][0].y;

				var minZ = jsons[0][0].z;
		    	var maxZ = jsons[0][0].z;

		    	jsons.forEach(function(json,index){
		    		for(var i =0; i< json.length;i++){
		    			var position = json[i];
		    			if(position.x<minX){
		    				minX=position.x;
		    			}if(position.x>maxX){
		    				maxX=position.x;
		    			}if(position.y<minY){
		    				minY=position.y;
		    			}if(position.y>maxY){
		    				maxY=position.y;
		    			}if(position.z<minZ){
		    				minZ=position.z;
		    			}if(position.z>maxZ){
		    				maxZ=position.z;
		    			}
		    		}
		    	});
		    	var m = slope(minX,maxX);
		    	var ym= slope(minY,maxY);
		    	var zm=slope(minZ,maxZ);
		    	jsons.forEach(function(json,index){
		    		for(var i =0;i<json.length;i++){
		    			var position = json[i];		    			
		    			var newX = (position.x-minX)*m;
		    			var newY = (position.y-minY)*ym;
		    			var newZ =(position.z-minZ)*zm;

		    			
		    			position.x=newX;
		    			position.y=newY;
		    			position.z=newZ;
		    			var vector = new THREE.Vector3(newX,newY,newZ);
		    			vector.userData =position.userData; 
		    			points.vertices.push(vector);
		    		}
		    	});
		    }
	
			function debugaxis(aLen){
				axisLength = aLen;
				 createAxis(v(0, 0, 0), v(axisLength, 0, 0), 0xFF0000);
			    createAxis(v(axisLength, 0, 0), v(axisLength, axisLength, 0), 0x00FF00);
			    createAxis(v(0, 0, 0), v(0, 0, axisLength), 0x0000FF);
			};
			function v(x,y,z){ 
	            return new  THREE.Vector3(x,y,z); 
	    	}

			function createAxis(p1, p2, color){
				//console.log("createAxis");
	            var line, lineGeometry = new THREE.Geometry(),
	            lineMat = new THREE.LineBasicMaterial({color: color, lineWidth: 2});
	            lineGeometry.vertices.push(p1, p2);
	            line = new THREE.Line(lineGeometry, lineMat);
	            scene.add(line);
	            //console.log("line added");
	   		 }

			function drawAxisLabels(){
				 addText(
					    	{x:axisLength/8,y:-100,z:0},
					    	{x:Math.PI / 2,y:0,z:0},
					    	xAxisLabel);

				    addText(
				    	{y:axisLength/8,x:1100,z:0},
				    	{x:Math.PI / 2,y:Math.PI/2,z:0},
				    	yAxisLabel);
				    addText(
				    	{x:-50,y:-50,z:axisLength/6},
				    	{x:Math.PI / 2,y:-Math.PI/4,z:Math.PI/2},
				    	zAxisLabel);
				    
			}

			function addText(position,rotation,theText){
				
				var text3d = new THREE.TextGeometry( theText, {
					size: 90,
					height: 20,
					curveSegments: 3,
					font: "ubuntu"

				});

				text3d.computeBoundingBox();
				var centerOffset = -0.5 * ( text3d.boundingBox.max.x - text3d.boundingBox.min.x );

				//var textMaterial = new THREE.MeshBasicMaterial( { color: 0x8B4500, overdraw: 0.5 } );
				var textMaterial =new THREE.MeshPhongMaterial( { 
		            color: 0x8B4500, 
		            ambient: 0x2200ee, // should generally match color
		            specular: 0x050505,
		            side: THREE.DoubleSide,
		            shininess: 100
		        } ) ;

				
				text = new THREE.Mesh( text3d, textMaterial );

				//text.position.x = centerOffset;
				text.position.x = position.x;
				text.position.y = position.y ;
				text.position.z = position.z;

				text.rotation.x = rotation.x;
				text.rotation.y = rotation.y;
				text.rotation.z = rotation.z;

				textObjects.push(text);
				scene.add( text );
			}
	
			 function onDocumentMouseMove( event ){
				// the following line would stop any other event handler from firing
				// (such as the mouse's TrackballControls)
				// event.preventDefault();

				// update sprite position
				//crosshairSprite.position.set( event.clientX, event.clientY - 20, -1.5 );
				
				// update the mouse variable
				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
				/* var entry = mouseProyection();
				sphere.position.set(entry.x,entry.y,entry.z); */															
				//scene.add(sphere);

				/* this.mesh.position.x = -(SCREEN_WIDTH / 2) + mouseX;
				this.mesh.poyition.y = (SCREEN_WIDTH / 2) - mouseY; */
				/* var el = document.getElementById("tooltip");
				el.style.left= event.clientX; */
				
				/* console.log(event.clientX+ ","+event.clientY);
				var crosshairPercentX = 50*mouse.x+50;
				var crosshairPercentY = 50*mouse.y+50;
				var crosshairPositionX = (crosshairPercentX / 100) * 2 - 1;
				var crosshairPositionY = (crosshairPercentY / 100) * 2 - 1;
				crosshairSprite.position.x = -(window.innerWidth/2)+event.clientX;
				crosshairSprite.position.y = (window.innerHeight/2)-event.clientY; */
				
				
				//entconsole.log("onDocumentMouseMove, mouseposition("+mouse.x+","+mouse.y+")");
			} 
			
		 function Tooltip(useExplicitPositions){
				    var top = 3;
				    var left = 3;
				    var maxw = 300;
				    var speed = 100;
				    var timer = 20;
				    var endalpha = 95;
				    var alpha = 0;
				    var tt, t, c, b, h;
				    var ie = document.all ? true : false;
				    
				    this.show = function(v, w){
				        if (tt == null) {
				            tt = document.createElement('div');
				            tt.style.color = "#8B4500";
				            
				            tt.style.position = 'absolute';
				            tt.style.display = 'block';
				            
				            t = document.createElement('div');
				            
				            t.style.display = 'block';
				            t.style.height = '5px';
				            t.style.marginleft = '5px';
				            t.style.overflow = 'hidden';
				            
				            c = document.createElement('div');
				            
				            b = document.createElement('div');
				            
				            tt.appendChild(t);
				            tt.appendChild(c);
				            tt.appendChild(b);
				            document.body.appendChild(tt);
				            
				            if (!ie) {
				                tt.style.opacity = 0;
				                tt.style.filter = 'alpha(opacity=0)';
				            }
				            else 
				                tt.style.opacity = 1;
				            
				            
				        }
				        
				        if (!useExplicitPositions) 
				            document.onmousemove = this.pos;
				        
				        tt.style.display = 'block';
				        c.innerHTML = '<span style="font-weight:bold; font-family: arial;">' + v + '</span>';
				        tt.style.width = w ? w + 'px' : 'auto';
				        
				        if (!w && ie) {
				            t.style.display = 'none';
				            b.style.display = 'none';
				            tt.style.width = tt.offsetWidth;
				            t.style.display = 'block';
				            b.style.display = 'block';
				        }
				        
				        if (tt.offsetWidth > maxw) {
				            tt.style.width = maxw + 'px';
				        }
				        
				        h = parseInt(tt.offsetHeight) + top;
				        
				        if (!ie) {
				            clearInterval(tt.timer);
				            tt.timer = setInterval(function(){
				                fade(1);
				            }, timer);
				        }
				    };
				    
				    this.setPos = function(e){
				        tt.style.top = e.y + 'px';
				        tt.style.left = e.x + 'px';
				    };
				    
				    this.pos = function(e){
				        var u = ie ? event.clientY + document.documentElement.scrollTop : e.pageY;
				        var l = ie ? event.clientX + document.documentElement.scrollLeft : e.pageX;
				        tt.style.top = (u - h) + 'px';
				        tt.style.left = (l + left) + 'px';
				    };
				    
				    function fade(d){
				        var a = alpha;
				        
				         if ((a != endalpha && d == 1) || (a != 0 && d == -1)) {
				            var i = speed;
				            
				            if (endalpha - a < speed && d == 1) {
				                i = endalpha - a;
				            }
				            else 
				                if (alpha < speed && d == -1) {
				                    i = a;
				                }
				            
				            alpha = a + (i * d);
				            tt.style.opacity = alpha * .01;
				            tt.style.filter = 'alpha(opacity=' + alpha + ')';
				        }
				        else {
				            clearInterval(tt.timer);
				            
				            if (d == -1) {
				                tt.style.display = 'none';
				            }
				        } 
				    }
				    
				    this.hide = function() {
				        if (tt == null) 
				            return;
				        
				        if (!ie) {
				                
				            clearInterval(tt.timer);
				            
				            tt.timer = setInterval(function() {
				                
				                fade(-1);
				                
				            }, timer);
				            
				        }
				        else {
				            tt.style.display = 'none';
				        }
				    };
				   return this; 
				};
	
			//]]>
		    </script>
						 
		</ui:insert>
	</h:body> 
</html>