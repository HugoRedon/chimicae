<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:h="http://java.sun.com/jsf/html">

	
	<h:head>
		<title>Chimicae</title>
		<meta charset="utf-8"/>
	 	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0"/>
		 
		<h:outputStylesheet name="css/style.css"  />
		
		<h:outputScript name="js/three.min.js"  />
		<h:outputScript name="js/Detector.js"  />
		<h:outputScript name="js/Stats.js"  />
		<h:outputScript name="js/controls/TrackballControls.js"  />
		<h:outputScript name="js/THREEx.KeyboardState.js"  />
		<h:outputScript name="js/THREEx.FullScreen.js"  />
		<h:outputScript name="js/THREEx.WindowResize.js"  />
		<h:outputScript name="fonts/ubuntu_light.typeface.js"/>
		
	</h:head> 
	<h:body> 
		<ui:insert name="content">
			 <div id="ThreeJS" style="position: absolute; left:0px; top:0px" ></div>
		    <script>
		  //<![CDATA[
		    var container, scene, camera, renderer, controls, stats;
		    var keyboard = new THREEx.KeyboardState();
		    var clock = new THREE.Clock();
		    // custom global variables
		    var MovingCube;
		    init();
		    animate();
		
		   function init(){
			   	MovingCube = new THREE.Object3D();
		        sceneCameraRenderer();
		        eventsControlsStats();
		        lightFloorSkybox();
		       
		        var cubeMaterial = new THREE.MeshLambertMaterial( {color: 0x0000ff, side: THREE.DoubleSide, opacity: 0.5} );
		        var redMaterial = new THREE.MeshLambertMaterial( {color: 0xff0000, side: THREE.DoubleSide ,opacity: 0.5} );
				
		        var jsondata1 = #{plotBean.jsonData};
		        var jsondata2 = #{plotBean.secondJson};
		        var jsondata3 = #{plotBean.thirdJson};

		        var jsons;
		        
		        if(#{plotBean.thirdPlot}){
			        jsons = [jsondata1,jsondata2,jsondata3];
		        	
		        }else if(#{plotBean.secondPlot}){
			        jsons = [jsondata2,jsondata1];
		        }else{
			        jsons = [jsondata1];
		        }
		        
		        normalizeAndAddGeometries(jsons,[cubeMaterial,redMaterial,cubeMaterial]);		        			  
		    }

		    function normalizeAndAddGeometries(jsons,materials){
		    	normalizeVars(jsons);
	        	createAndAddGeometries(jsons,materials);
		    }

			function createAndAddGeometries(jsons,materials){
				jsons.forEach(function(json,index){
					createAndAddGeometry(json,materials[index]);
				});
			}
		    
		    function createAndAddGeometry(json,material){
		    	var geometry = new THREE.Geometry();
	            for(var i = 0; i<json.length ; i++){
	                var x = json[i].x;
	                var y = json[i].y;
	                var z = json[i].z;
	                geometry.vertices.push(new THREE.Vector3(x,y,z));			         
	            }
	            var n = Math.sqrt( json.length);
	            for(var i = 0; i < n-1;i++){
	                for(var j = 0; j <n-1;j++){
	                    var index = n*i +j;
	                    geometry.faces.push(new THREE.Face3(index,index+1,n+index));
	                    geometry.faces.push(new THREE.Face3(index+1,index+n+1,index+n));
	                }
	            }	
	            geometry.mergeVertices()
		        geometry.computeFaceNormals();
	            geometry.computeVertexNormals();	            
		        var mesh = new THREE.Mesh(geometry, material);

		        MovingCube.add(mesh);
		        scene.add(mesh);		
	            
		    }
	
	
	
			function sceneCameraRenderer(){
			     // SCENE
			    scene = new THREE.Scene();
			    // CAMERA
			    var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
			    var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
			    camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
			    
			    camera.position.set(3000,0,1000);
			    camera.up = new THREE.Vector3( 0, 0, 1 );
			    camera.lookAt(scene.position);  
	
			    scene.add(camera);
			    // RENDERER
			    if ( Detector.webgl )
			        renderer = new THREE.WebGLRenderer( {antialias:true} );
			    else
			        renderer = new THREE.CanvasRenderer(); 
			    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
			    container = document.getElementById( 'ThreeJS' );
			    container.appendChild( renderer.domElement );
			}
			function eventsControlsStats(){
			    // EVENTS
			    THREEx.WindowResize(renderer, camera);
			    THREEx.FullScreen.bindKey({ charCode : 'm'.charCodeAt(0) });
			    // CONTROLS
			    controls = new THREE.TrackballControls(camera,renderer.domElement);
			    //controls = new THREE.OrbitControls( camera, renderer.domElement );
			    // STATS
			    stats = new Stats();
			    stats.domElement.style.position = 'absolute';
			    stats.domElement.style.bottom = '0px';
			    stats.domElement.style.zIndex = 100;
			    container.appendChild( stats.domElement );
			}
			function animate(){
			    requestAnimationFrame( animate );
			    render();       
			    update();
			}
	
			function update()
			{
			    var delta = clock.getDelta(); // seconds.
			    var moveDistance = 200 * delta; // 200 pixels per second
			    var rotateAngle = Math.PI / 2 * delta;   // pi/2 radians (90 degrees) per second
			    
			    // local coordinates
	
			    // local transformations
	
			    // move forwards/backwards/left/right
			    if ( keyboard.pressed("W") )
			        MovingCube.translateZ( -moveDistance );
			    if ( keyboard.pressed("S") )
			        MovingCube.translateZ(  moveDistance );
			    if ( keyboard.pressed("Q") )
			        MovingCube.translateX( -moveDistance );
			    if ( keyboard.pressed("E") )
			        MovingCube.translateX(  moveDistance ); 
	
			    // rotate left/right/up/down
			    var rotation_matrix = new THREE.Matrix4().identity();
			    if ( keyboard.pressed("A") )
			        MovingCube.rotateOnAxis( new THREE.Vector3(0,1,0), rotateAngle);
			    if ( keyboard.pressed("D") )
			        MovingCube.rotateOnAxis( new THREE.Vector3(0,1,0), -rotateAngle);
			    if ( keyboard.pressed("R") )
			        MovingCube.rotateOnAxis( new THREE.Vector3(1,0,0), rotateAngle);
			    if ( keyboard.pressed("F") )
			        MovingCube.rotateOnAxis( new THREE.Vector3(1,0,0), -rotateAngle);
			    
			    if ( keyboard.pressed("Z") )
			    {
			        MovingCube.position.set(0,25.1,0);
			        MovingCube.rotation.set(0,0,0);
			    }
			        
			    // global coordinates
			    if ( keyboard.pressed("left") )
			        MovingCube.position.x -= moveDistance;
			    if ( keyboard.pressed("right") )
			        MovingCube.position.x += moveDistance;
			    if ( keyboard.pressed("up") )
			        MovingCube.position.z -= moveDistance;
			    if ( keyboard.pressed("down") )
			        MovingCube.position.z += moveDistance;
			        
			    controls.update();
			    stats.update();
			}
	
			function render() 
			{
			    renderer.render( scene, camera );
			}
	
	
			function lightFloorSkybox(){
			 
			    // LIGHT
			    var light = new THREE.PointLight(0xffffff);
			    light.position.set(0,0,2500);
			    light.castShadow =true;
	
			    var light2 = new THREE.PointLight(0xffffff);
			    light2.position.set(2500,2500,2500);
			    scene.add(light2);
			    scene.add(light);
			    // FLOOR
			    
			    var wireframeMaterial = new THREE.MeshBasicMaterial( { color: 0x555555, wireframe: true, side:THREE.DoubleSide } ); 
			    var floorGeometry = new THREE.PlaneGeometry(1500, 1500, 10, 10);
			    var floor =new THREE.Mesh(floorGeometry, wireframeMaterial);
			    //floor.position.z = 1000;
			    floor.position.x=500;
			    floor.position.y=500;
			    //floor.rotation.x = Math.PI / 2;
			    scene.add(floor);
			    // SKYBOX/FOG
			    var skyBoxGeometry = new THREE.BoxGeometry( 10000, 10000, 10000 );
			    var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0xdddddd, side: THREE.BackSide } );
			    var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
			     scene.add(skyBox);
			    //scene.fog = new THREE.FogExp2( 0x9999ff, 0.00025 );
			}
			function slope(min,max){
            	return 1000/(max-min);
            }

		    function normalizeVars(jsons){
		    	var minX = jsons[0][0].x;
		    	var maxX = jsons[0][0].x;

		    	var minY = jsons[0][0].y;
		    	var maxY = jsons[0][0].y;

				var minZ = jsons[0][0].z;
		    	var maxZ = jsons[0][0].z;

		    	jsons.forEach(function(json,index){
		    		for(var i =0; i< json.length;i++){
		    			var position = json[i];
		    			if(position.x<minX){
		    				minX=position.x;
		    			}if(position.x>maxX){
		    				maxX=position.x;
		    			}if(position.y<minY){
		    				minY=position.y;
		    			}if(position.y>maxY){
		    				maxY=position.y;
		    			}if(position.z<minZ){
		    				minZ=position.z;
		    			}if(position.z>maxZ){
		    				maxZ=position.z;
		    			}
		    		}
		    	});
		    	var m = slope(minX,maxX);
		    	var ym= slope(minY,maxY);
		    	var zm=slope(minZ,maxZ);
		    	jsons.forEach(function(json,index){
		    		for(var i =0;i<json.length;i++){
		    			var position = json[i];		    			
		    			var newX = (position.x-minX)*m;
		    			var newY = (position.y-minY)*ym;
		    			var newZ =(position.z-minZ)*zm;
		    			position.x=newX;
		    			position.y=newY;
		    			position.z=newZ;
		    		}
		    	});
		    }
	
			var debugaxis = function(axisLength){
			    //Shorten the vertex function
			    function v(x,y,z){ 
			            return new  THREE.Vector3(x,y,z); 
			    }
			    
			    //Create axis (point1, point2, colour)
			    function createAxis(p1, p2, color){
			            var line, lineGeometry = new THREE.Geometry(),
			            lineMat = new THREE.LineBasicMaterial({color: color, lineWidth: 2});
			            lineGeometry.vertices.push(p1, p2);
			            line = new THREE.Line(lineGeometry, lineMat);
			            scene.add(line);
			    }



			    addText(
				    	{x:axisLength/4,y:-100,z:0},
				    	{x:Math.PI / 2,y:0,z:0},
				    	'#{plotBean.xAxisLabel}');

			    addText(
			    	{y:400+axisLength/4,x:-100,z:0},
			    	{x:Math.PI / 2,y:-Math.PI/2,z:0},
			    	'#{plotBean.yAxisLabel}');
			    addText(
			    	{x:-50,y:-50,z:axisLength/4},
			    	{x:Math.PI / 2,y:Math.PI/4,z:Math.PI/2},
			    	'#{plotBean.zAxisLabel}');
			    
			    createAxis(v(0, 0, 0), v(axisLength, 0, 0), 0xFF0000);
			    createAxis(v(0, 0, 0), v(0, axisLength, 0), 0x00FF00);
			    createAxis(v(0, 0, 0), v(0, 0, axisLength), 0x0000FF);
			};

			function addText(position,rotation,theText){
				
				var text3d = new THREE.TextGeometry( theText, {
					size: 90,
					height: 20,
					curveSegments: 3,
					font: "ubuntu"

				});

				text3d.computeBoundingBox();
				var centerOffset = -0.5 * ( text3d.boundingBox.max.x - text3d.boundingBox.min.x );

				var textMaterial = new THREE.MeshBasicMaterial( { color: 0x000000, overdraw: 0.5 } );
				text = new THREE.Mesh( text3d, textMaterial );

				//text.position.x = centerOffset;
				text.position.x = position.x;
				text.position.y = position.y ;
				text.position.z = position.z;

				text.rotation.x = rotation.x;
				text.rotation.y = rotation.y;
				text.rotation.z = rotation.z;
				scene.add( text );
			}
	
			//To use enter the axis length
			debugaxis(1000)


			//]]>
		    </script>
						 
		</ui:insert>
	</h:body> 
</html>